# Install haproxy, create a concatinated chain file from files present on the server (generated
# self signed certificates) and setup a haproxy.cfg
- name: Converge
  hosts: all
  become: True
  roles:
    - role-selfsigned-certificate
    - role-haproxy
  vars:

    # role-selfsigned-certificate
    selfsigned_certificate_common_name: www.example.com
    selfsigned_certificate_subject_alt_name: "DNS:www.beispiel.de"

    # This variable defines how to manage the ssl certificate files required for haproxy. It needs
    # to have a key, certificate, intermediates and dhparam concatinated into one file. Options:
    # concatinate: concatinates files available on the server
    # variables:   creates a new file from varibales given in this play
    # False:       does nothing (default)
    haproxy_ssl_managed_mode: concatinate

    # This will create /etc/haproxy/ssl/{{ haproxy_ssl_chain_filename }}.pem from all the collected certs
    # Required for haproxy_ssl_managed_mode: concatinate and variables
    haproxy_ssl_chain_filename: www.example.com

    # These variables are required only for the concatinate mode
    # haproxy_ssl_crt_path: /etc/letsencrypt/live/example.com/cert.pem
    # haproxy_ssl_key_path: /etc/letsencrypt/live/example.com/privkey.pem
    # haproxy_ssl_intermediate_path: /etc/letsencrypt/live/example.com/chain.pem
    haproxy_ssl_crt_path: "{{ selfsigned_certificate_cert_path }}"
    haproxy_ssl_key_path: "{{ selfsigned_certificate_privkey_path }}"
    # Omit intermediates in the concatinated file - only works for haproxy_ssl_intermediate_path
    haproxy_ssl_intermediate_path: False
    haproxy_ssl_dhparam_path: "{{ selfsigned_certificate_dhparam_path }}"

    # Some variables custom to the example haproxy.cfg.j2 template
    # A list of error files
    # Requires templates/etc/haproxy/errors/{{ file }}.html.j2 to be present
    haproxy_errorfiles:
      - 503



# Preparations for running the tests
# Install nginx and make it listen on localhost:8080 and make it respond with the host header
# Also setup www.example.com and wwww.beispiel.de in /etc/hosts for being able to curl them
- name: Converge
  hosts: all
  become: True
  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
        enabled: True
        masked: no
        force: True
        daemon_reload: True

  tasks:

    - name: prevent nginx for starting after installation, as it fails to bind :80 which breaks apt
      changed_when: False
      file:
        state: link
        src: /dev/null
        dest: /etc/systemd/system/nginx.service

    - name: put www.example.com and www.beispiel.de into /etc/hosts
      lineinfile:
        dest: /etc/hosts
        line: '127.0.0.1 www.beispiel.de www.example.com'
        state: present

    - name: install nginx, python3-requests and curl
      apt:
        name:
          - nginx
          - python3-requests
          - curl
        state: present

    - name: template /etc/nginx/sites-enabled/default
      copy:
        dest: /etc/nginx/sites-enabled/default
        content: |
          server {
              server_name _;
              listen 8080;
              location / {
                  return 200 $host ;
                  add_header Content-Type text/plain;
              }
            }
      notify: restart nginx
