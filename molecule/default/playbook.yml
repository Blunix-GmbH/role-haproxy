---
# Most minimal usage of role-haproxy - just installs the haproxy package and generate a dhparam
- name: Converge
  hosts: all
  become: True
  roles:
    - role: role-haproxy
  vars:
    # You will have to setup your own magic to make the certificate available for your haproxy.cfg
    # This will however still create a dhparam (because you need one in any cases)
    haproxy_ssl_managed_mode: False
    # This role will alwyas generate the dhparam in /etc/haproxy/ssl/dhparam{{ haproxy_dhparam_size }}.pem
    haproxy_dhparam_size: 512


# Install haproxy and create a concatinated ssl chain file from variables to use it in haproxy.cfg
- name: Converge
  hosts: all
  become: True
  roles:
    - role: role-haproxy
  vars:
    haproxy_dhparam_size: 512
    haproxy_ssl_managed_mode: variables
    # All variables below are required for haproxy_ssl_managed_mode: variables
    haproxy_ssl_chain_filename: www.beispiel.de
    haproxy_ssl_crt: |
      -----BEGIN CERTIFICATE-----
      MIIFkzCCA3ugAwIBAgIJAPoHRB5deMfUMA0GCSqGSIb3DQEBCwUAMF8xCzAJBgNV
      BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
      aWRnaXRzIFB0eSBMdGQxGDAWBgNVBAMMD3d3dy5iZWlzcGllbC5kZTAgFw0xODA5
      MjQyMzIxNTlaGA8yMTE4MDgzMTIzMjE1OVowXzELMAkGA1UEBhMCQVUxEzARBgNV
      BAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0
      ZDEYMBYGA1UEAwwPd3d3LmJlaXNwaWVsLmRlMIICIjANBgkqhkiG9w0BAQEFAAOC
      Ag8AMIICCgKCAgEAs+r89ZDS2nqWc2qRwA6jNa77Hmtdk7SsyxR0Ry7VudkfaQmC
      zo9Bz3P357iix0EF7oQFKAQXvqQQ2EiJfrKVXbMg90NauidFpv9CVgbpPAAI3Y2D
      YJIgRY02b8JH/TNY3E754ZJzRLvgEGRPsN7nhs1uydF/C7o9AYidbiFVNM4A1CLT
      /57Yvw6Zt5PKXL1Rit2h9q618wSZTMtAYlHqB4xo44vqXf5cH3R0vZM2o3XqxF4r
      fvaDZfsk+H7iIV+MvUguDZViBZIasc6zzEFbX0T1OaQXYk7a8orLm492DhkFC6Iv
      CPvCkTloP7KiXZ7kw9eplDMMZ2NdJNgbPib39VcCcoDhstfkJfx8zCNa80Xf70Gb
      YSNE8lbFTwn+2W/w5/CsuZYVK9oJRzWNLX0ynnBL1wQhik1QeTcehPI+1EqFbjty
      G+RLGUzIoFEPEBhf0Qe7Qm98iZanbAtXDxeV399ne+gprg2Mx2OVzr72F2wkj67I
      e9hOzR2O0A5EaYJo7c3dOtQ+VUx4jAAuR+jU+mvWp7rueJTWlXQ0w5voSJlx4WK3
      7Ly0nDGMU5Jss/PbhXi8LG9JTJ4C4EBlVLYmO+oPFrSPO2+xYFp8QR7ncMg4M6UU
      P+wv83MblPYUXxtJA2gxaacPUllostiqQPE25ApJZeTNSmXwBwcW+N04S0cCAwEA
      AaNQME4wHQYDVR0OBBYEFD+dpJsTl/sdtG/V74cNZqRLqECTMB8GA1UdIwQYMBaA
      FD+dpJsTl/sdtG/V74cNZqRLqECTMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEL
      BQADggIBAIBfc7Kk4qnMx+klZ6PJvZ1enyPFvYzhhd6V8s/i2f2XH17NezLx6szU
      lipnmaUVCHrGZ1xernR1YTHujT7BDLu8Y85nv5EB95bctGyzCrgeUwhP7TdfcLVq
      ediFeUOpGdULBTIhmY1GsSaNHG8zGpfzJM81xfPd4SAJWOuMMJpqKUpyrTwgdG18
      RsjjRE3M7cIPWoADlIibl1lNjHvg9Av8f5yPGzK8JMxY3fFvNloifi3OjIrgB2gA
      ll344k1CbZGMCSZq5185nMofcezly5lH0bCw6sKpgrwcnppZK1E85FcjKpvfyS+q
      wyCnHJwRzdWXyfJCJ8VSCBiryJug2DakzrlY615VWzDcurD2qGEXbpLzH+S+Q77J
      YqVC74OtMy/k5EhgCjQyWqBoT5LS65Pc+gPTUmHATGRPVTb45gI9VCC/lOAagKUL
      gRnrToLFB4h9YEQhpOHvYsbh9yQ6bpo0jGfbWJO2oUKK4mWEJEVvNYvyVMEVJvoy
      LuIow2KbBIMQxFCjVS87Q+LfYznEs1m01ArvW70mZnvucT1Sh6Vt6idgYdF8FDRr
      rLqPLG01j6fBg47snZgiNYw0OvOEp2fLfvaxEkywb2YJwriR9a2Fr3zlG2hFmlec
      0johZ5hjPbzO/uGDgYLFsh8YxqHY5cgxiCVZXC65NLGv0G5rf9e0
      -----END CERTIFICATE-----
    haproxy_ssl_key: |
      -----BEGIN PRIVATE KEY-----
      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
      ls+jPZ3wGGEjYLAS2fVfG4EcZ1fWSBvF
      -----END PRIVATE KEY-----
    # haproxy_ssl_intermediate: |
      # -----BEGIN CERTIFICATE-----
      # -----END CERTIFICATE-----
    haproxy_ssl_intermediate: False


# Install haproxy, create a concatinated chain file from files present on the server (generated
# self signed certificates) and setup a haproxy.cfg
- name: Converge
  hosts: all
  become: True
  roles:
    - role: role-haproxy
  vars:

    # Location of your haproxy.cfg.j2 template file
    # You have to specify this, as the template has to be in your playbook
    haproxy_config_template_path: templates/etc/haproxy/haproxy.cfg.j2

    haproxy_dhparam_size: 512

    # This variable defines how to manage the ssl certificate files required for haproxy. It needs
    # to have a key, certificate, intermediates and dhparam concatinated into one file. Options:
    # concatinate: concatinates files available on the server
    # variables:   creates a new file from varibales given in this play
    # False:       does nothing (default)
    haproxy_ssl_managed_mode: concatinate

    # This will create /etc/haproxy/ssl/{{ haproxy_ssl_chain_filename }}.pem from all the collected certs
    # Required for haproxy_ssl_managed_mode: concatinate and variables
    haproxy_ssl_chain_filename: www.example.com

    # These variables are required only for the concatinate mode
    # haproxy_ssl_crt_path: /etc/letsencrypt/live/example.com/cert.pem
    # haproxy_ssl_key_path: /etc/letsencrypt/live/example.com/privkey.pem
    # haproxy_ssl_intermediate_path: /etc/letsencrypt/live/example.com/chain.pem
    haproxy_ssl_crt_path: /etc/ssl/certs/snakeoil.crt
    haproxy_ssl_key_path: /etc/ssl/private/snakeoil.key
    # Omit intermediates in the concatinated file - only works for haproxy_ssl_intermediate_path
    haproxy_ssl_intermediate_path: False

    # Some variables custom to the example haproxy.cfg.j2 template
    # A list of error files
    haproxy_errorfiles:
      - code: 503
        path: /etc/haproxy/errors/503.html

  pre_tasks:

    # Prepare a snakeoil cert for haproxy to use
    # only required in molecule
    - name: install python-openssl
      apt:
        name: python-openssl
        state: present

    - name: generate an openssl private key
      openssl_privatekey:
        path: /etc/ssl/private/snakeoil.key

    - name: generate an openssl certificate signing request
      openssl_csr:
        path: /etc/ssl/private/snakeoil.csr
        privatekey_path: /etc/ssl/private/snakeoil.key
        common_name: "www.example.com"

    - name: generate an openssl self signed certificate
      openssl_certificate:
        path: /etc/ssl/certs/snakeoil.crt
        privatekey_path: /etc/ssl/private/snakeoil.key
        csr_path: /etc/ssl/private/snakeoil.csr
        provider: selfsigned

  post_tasks:

    - name: create directory for error files
      file:
        state: directory
        path: /etc/haproxy/errors/
        owner: www-data
        group: www-data
        mode: 0750

    - name: manage error files
      template:
        src: "templates/{{ haproxy_errorfile['path'] }}"
        dest: "{{ haproxy_errorfile['path'] }}"
        owner: www-data
        group: www-data
        mode: 0640
      with_items: "{{ haproxy_errorfiles }}"
      loop_control:
        loop_var: haproxy_errorfile

    - name: template /etc/haproxy/haproxy.cfg
      template:
        src: "etc/haproxy/haproxy.cfg.j2"
        dest: "/etc/haproxy/haproxy.cfg"
        owner: root
        group: root
        mode: 0600
        validate: haproxy -f %s -c -q
      notify: restart haproxy


# Preparations for running the tests
# Install nginx and make it listen on localhost:8080 and make it respond with the host header
# Also setup www.example.com and wwww.beispiel.de in /etc/hosts for being able to curl them
- name: Converge
  hosts: all
  become: True
  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        enabled: True
        state: restarted
        masked: no
        force: True
        daemon_reload: True
  tasks:
    - name: prevent nginx for starting after installation, as it fails to bind :80 which breaks apt
      changed_when: no
      file:
        state: link
        src: /dev/null
        dest: /etc/systemd/system/nginx.service
    # - name: put www.example.com and www.beispiel.de into /etc/hosts
    #   lineinfile:
    #     dest: /etc/hosts
    #     line: '127.0.0.1 www.beispiel.de www.example.com'
    #     state: present
    - name: install nginx and python-requests
      apt:
        pkg: "{{ haproxy_tests_package }}"
        state: present
      with_items:
        - nginx
        - python-requests
      loop_control:
        loop_var: haproxy_tests_package
    - name: template /etc/nginx/sites-enabled/default
      copy:
        dest: /etc/nginx/sites-enabled/default
        content: |
          server {
              server_name _;
              listen 8080;
              location / {
                  return 200 $host ;
                  add_header Content-Type text/plain;
              }
            }
      notify: restart nginx
